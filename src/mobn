#!/usr/bin/env python
import argparse
import time
from subprocess import Popen, PIPE, STDOUT


BRANCH_NAME = 'matcha'


def branch():
    process = Popen(['git branch'], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()
    return output

def create_branch(name):
    process = Popen(['git checkout -b {}'.format(name)], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def say(phrase):
    process = Popen(['say {}'.format(phrase)], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def new(branch_name):
    create_branch(branch_name)

def add_all():
    process = Popen(['git add .'], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def commit_all(message="wip"):
    process = Popen(['git commit -m {}'.format(message)], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def push_all():
    process = Popen(['git push origin'], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def checkout(branch):
    process = Popen(['git checkout {}'.format(branch)], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def pull():
    process = Popen(['git pull origin'], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, )
    output, _ = process.communicate()

def next():
    time.sleep(5)
    say('Time up!')
    add_all()
    commit_all()
    push_all()
    print("pushed to branch!")

def start(branchName):
    checkout("master")
    pull()
    print("pulling master...")
    checkout(branchName)
    pull()
    print("pulling workstream...")
    say("Time start!")
    next()    


parser = argparse.ArgumentParser(description='mobn git handoff tool')
parser.add_argument('command', help='the command (eg say, new)')
parser.add_argument('arguments', nargs='*',
                    help='arguments to the command (eg huhuhu)')
args = parser.parse_args()

if args.command == "say":
    say(' '.join(args.arguments))
elif args.command == "new":
    new(BRANCH_NAME)
elif args.command == "next":
    next()
elif args.command == "continue":
    start(BRANCH_NAME)


if __name__ == '__main__':
    pass
