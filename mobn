#!/usr/bin/env python

import argparse
import json
from src.domain.config import get_workstream_name, get_config, set_config, remove_config
from src.domain.say import say
from src.finish import finish
from src.get_help import get_help
from src.increment_turn import increment_turn
from src.load_workstream import load_workstream
from src.new import new
from src.select_next_mobber import select_next_mobber
from src.set_team import set_team
from src.start_turn import start_turn

parser = argparse.ArgumentParser(
    description='mobn git handoff tool'
)
parser.add_argument(
    'command',
    help='the command (eg say, new)'
)
parser.add_argument(
    'arguments',
    nargs='*',
    help='arguments to the command'
)

args = parser.parse_args()


MOBN_CONFIG_PATH = "mobn.config"


class NullEffect(object):
    def run(self):
        pass


def runAll(effects):
    for effect in effects:
        effect.run()


if args.command == "new" or args.command == "start":
    workstream_name = get_workstream_name().run()
    if not workstream_name:
        print("No workstream found! try `export MOBN_WORKSTREAM_NAME=<chosen name>`")
    else:
        config = get_config("mobn.config").run()
        team = config["team_members"]
        first_mobber = select_next_mobber(config)
        config = increment_turn(config)
        next_mobber = select_next_mobber(config)

        runAll(
            [
                say("It is {}s turn".format(first_mobber))
                if first_mobber else NullEffect()
            ] +
            [set_config(MOBN_CONFIG_PATH, config)] +
            new(workstream_name) +
            start_turn(workstream_name) +
            [
                say("It is {}s turn".format(next_mobber))
                if next_mobber else NullEffect()
            ]
        )


elif args.command == "continue":
    workstream_name = get_workstream_name().run()
    if not workstream_name:
        print("No workstream found! try `export MOBN_WORKSTREAM_NAME=<chosen name>`")

    else:
        runAll(load_workstream(workstream_name))

        config = get_config("mobn.config").run()
        config = increment_turn(config)
        set_config(MOBN_CONFIG_PATH, config).run()
        team = config["team_members"]

        next_mobber = select_next_mobber(config)
        runAll(start_turn(workstream_name))
        if next_mobber:
            say("It is {}s turn".format(next_mobber)).run()

elif args.command == "done":
    workstream_name = get_workstream_name().run()
    if not workstream_name:
        print("No workstream found! try `export MOBN_WORKSTREAM_NAME=<chosen name>`")
    else:
        remove_config(MOBN_CONFIG_PATH).run()
        runAll(finish(workstream_name, args.arguments[0]))

elif args.command == "workstream":
    print(get_workstream_name().run())

elif args.command == "help":
    print(json.dumps(get_help(), indent=4))

elif args.command == "config":
    config = get_config("mobn.config").run()
    print(json.dumps(config, indent=4))

elif args.command == "team":
    config = get_config("mobn.config").run()
    config = set_team(args.arguments, config)
    set_config(MOBN_CONFIG_PATH, config).run()
    print(json.dumps(config, indent=4))

elif args.command == "skip":
    config = get_config("mobn.config").run()
    config = increment_turn(config)
    set_config(MOBN_CONFIG_PATH, config).run()

    next_mobber = select_next_mobber(config)
    if next_mobber:
        say("It is {}s turn".format(next_mobber)).run()

    print(json.dumps(config, indent=4))

elif args.command == "hello":
    print("Hello, World")
