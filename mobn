#!/usr/bin/env python

import argparse
from src.commands import new, load_workstream, finish, start_turn
from src.config import get_workstream_name

parser = argparse.ArgumentParser(
    description='mobn git handoff tool'
)
parser.add_argument(
    'command',
    help='the command (eg say, new)'
)
parser.add_argument(
    'arguments',
    nargs='*',
    help='arguments to the command'
)

args = parser.parse_args()


def runAll(effects):
    for effect in effects:
        effect.run()


if args.command == "new" or args.command == "start":
    workstream_name = get_workstream_name().run()
    if not workstream_name:
        print("No workstream found! try `export MOBN_WORKSTREAM_NAME=<chosen name>`")
    else:
        runAll(
            new(workstream_name) +
            start_turn(workstream_name)
        )
elif args.command == "continue":
    workstream_name = get_workstream_name().run()
    if not workstream_name:
        print("No workstream found! try `export MOBN_WORKSTREAM_NAME=<chosen name>`")
    else:
        runAll(
            load_workstream(workstream_name) +
            start_turn(workstream_name)
        )

elif args.command == "done":
    workstream_name = get_workstream_name().run()
    if not workstream_name:
        print("No workstream found! try `export MOBN_WORKSTREAM_NAME=<chosen name>`")
    else:
        runAll(finish(workstream_name, args.arguments[0]))

elif args.command == "workstream":
    print(get_workstream_name().run())

elif args.command == "help":
    print("""
    mobn new -> create a new mob session on your configured workstream
    mobn start -> alias for `mobn new`
    mobn continue -> pulls the current workstream onto your local machine and sets a timer
    mobn done <new branch name> -> puts all of the worksteam's commits onto a new branch so you can create a PR.
    mobn hello -> hello, world!
    mobn help -> you are here!
    """)

elif args.command == "hello":
    print("Hello, World")
